/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Isbm2RestClient.Client;
using Isbm2RestClient.Api;
// uncomment below to import models
//using Isbm2RestClient.Model;

namespace Isbm2RestClient.Test.Api
{
    /// <summary>
    ///  Class for testing ConsumerRequestServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConsumerRequestServiceApiTests : IDisposable
    {
        private ConsumerRequestServiceApi instance;

        public ConsumerRequestServiceApiTests()
        {
            instance = new ConsumerRequestServiceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConsumerRequestServiceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ConsumerRequestServiceApi
            //Assert.IsType<ConsumerRequestServiceApi>(instance);
        }

        /// <summary>
        /// Test CloseSession
        /// </summary>
        [Fact]
        public void CloseSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //instance.CloseSession(sessionId);
        }

        /// <summary>
        /// Test ExpireRequest
        /// </summary>
        [Fact]
        public void ExpireRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string messageId = null;
            //instance.ExpireRequest(sessionId, messageId);
        }

        /// <summary>
        /// Test OpenConsumerRequestSession
        /// </summary>
        [Fact]
        public void OpenConsumerRequestSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUri = null;
            //Session? session = null;
            //var response = instance.OpenConsumerRequestSession(channelUri, session);
            //Assert.IsType<Session>(response);
        }

        /// <summary>
        /// Test PostRequest
        /// </summary>
        [Fact]
        public void PostRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //Message? message = null;
            //var response = instance.PostRequest(sessionId, message);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test ReadResponse
        /// </summary>
        [Fact]
        public void ReadResponseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string requestId = null;
            //var response = instance.ReadResponse(sessionId, requestId);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test RemoveResponse
        /// </summary>
        [Fact]
        public void RemoveResponseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string requestId = null;
            //instance.RemoveResponse(sessionId, requestId);
        }
    }
}
