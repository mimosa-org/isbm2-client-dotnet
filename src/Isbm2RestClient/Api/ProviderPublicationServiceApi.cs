/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Isbm2RestClient.Client;
using Isbm2RestClient.Model;

namespace Isbm2RestClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderPublicationServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Closes a session.
        /// </summary>
        /// <remarks>
        /// Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CloseSession(string sessionId, int operationIndex = 0);

        /// <summary>
        /// Closes a session.
        /// </summary>
        /// <remarks>
        /// Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseSessionWithHttpInfo(string sessionId, int operationIndex = 0);
        /// <summary>
        /// Expires a posted publication.
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ExpirePublication(string sessionId, string messageId, int operationIndex = 0);

        /// <summary>
        /// Expires a posted publication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExpirePublicationWithHttpInfo(string sessionId, string messageId, int operationIndex = 0);
        /// <summary>
        /// Opens a publication session for a channel.
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Session</returns>
        Session OpenPublicationSession(string channelUri, int operationIndex = 0);

        /// <summary>
        /// Opens a publication session for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Session</returns>
        ApiResponse<Session> OpenPublicationSessionWithHttpInfo(string channelUri, int operationIndex = 0);
        /// <summary>
        /// Posts a publication message on a channel.
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message PostPublication(string sessionId, Message? message = default(Message?), int operationIndex = 0);

        /// <summary>
        /// Posts a publication message on a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> PostPublicationWithHttpInfo(string sessionId, Message? message = default(Message?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderPublicationServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Closes a session.
        /// </summary>
        /// <remarks>
        /// Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseSessionAsync(string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Closes a session.
        /// </summary>
        /// <remarks>
        /// Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseSessionWithHttpInfoAsync(string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Expires a posted publication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExpirePublicationAsync(string sessionId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Expires a posted publication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExpirePublicationWithHttpInfoAsync(string sessionId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Opens a publication session for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Session</returns>
        System.Threading.Tasks.Task<Session> OpenPublicationSessionAsync(string channelUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Opens a publication session for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        System.Threading.Tasks.Task<ApiResponse<Session>> OpenPublicationSessionWithHttpInfoAsync(string channelUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Posts a publication message on a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> PostPublicationAsync(string sessionId, Message? message = default(Message?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Posts a publication message on a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> PostPublicationWithHttpInfoAsync(string sessionId, Message? message = default(Message?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderPublicationServiceApi : IProviderPublicationServiceApiSync, IProviderPublicationServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProviderPublicationServiceApi : IProviderPublicationServiceApi
    {
        private Isbm2RestClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderPublicationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProviderPublicationServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderPublicationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProviderPublicationServiceApi(string basePath)
        {
            this.Configuration = Isbm2RestClient.Client.Configuration.MergeConfigurations(
                Isbm2RestClient.Client.GlobalConfiguration.Instance,
                new Isbm2RestClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Isbm2RestClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Isbm2RestClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Isbm2RestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderPublicationServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProviderPublicationServiceApi(Isbm2RestClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Isbm2RestClient.Client.Configuration.MergeConfigurations(
                Isbm2RestClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Isbm2RestClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Isbm2RestClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Isbm2RestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderPublicationServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProviderPublicationServiceApi(Isbm2RestClient.Client.ISynchronousClient client, Isbm2RestClient.Client.IAsynchronousClient asyncClient, Isbm2RestClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Isbm2RestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Isbm2RestClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Isbm2RestClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Isbm2RestClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Isbm2RestClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Closes a session. Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CloseSession(string sessionId, int operationIndex = 0)
        {
            CloseSessionWithHttpInfo(sessionId);
        }

        /// <summary>
        /// Closes a session. Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Isbm2RestClient.Client.ApiResponse<Object> CloseSessionWithHttpInfo(string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'sessionId' when calling ProviderPublicationServiceApi->CloseSession");
            }

            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.CloseSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sessions/{session-id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Closes a session. Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseSessionAsync(string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CloseSessionWithHttpInfoAsync(sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Closes a session. Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Isbm2RestClient.Client.ApiResponse<Object>> CloseSessionWithHttpInfoAsync(string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'sessionId' when calling ProviderPublicationServiceApi->CloseSession");
            }


            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.CloseSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sessions/{session-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expires a posted publication. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ExpirePublication(string sessionId, string messageId, int operationIndex = 0)
        {
            ExpirePublicationWithHttpInfo(sessionId, messageId);
        }

        /// <summary>
        /// Expires a posted publication. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Isbm2RestClient.Client.ApiResponse<Object> ExpirePublicationWithHttpInfo(string sessionId, string messageId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'sessionId' when calling ProviderPublicationServiceApi->ExpirePublication");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'messageId' when calling ProviderPublicationServiceApi->ExpirePublication");
            }

            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.ExpirePublication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sessions/{session-id}/publications/{message-id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpirePublication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expires a posted publication. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExpirePublicationAsync(string sessionId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ExpirePublicationWithHttpInfoAsync(sessionId, messageId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Expires a posted publication. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the publication was posted.</param>
        /// <param name="messageId">The identifier of the posted publication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Isbm2RestClient.Client.ApiResponse<Object>> ExpirePublicationWithHttpInfoAsync(string sessionId, string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'sessionId' when calling ProviderPublicationServiceApi->ExpirePublication");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'messageId' when calling ProviderPublicationServiceApi->ExpirePublication");
            }


            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("message-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.ExpirePublication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sessions/{session-id}/publications/{message-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpirePublication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Opens a publication session for a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Session</returns>
        public Session OpenPublicationSession(string channelUri, int operationIndex = 0)
        {
            Isbm2RestClient.Client.ApiResponse<Session> localVarResponse = OpenPublicationSessionWithHttpInfo(channelUri);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Opens a publication session for a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Session</returns>
        public Isbm2RestClient.Client.ApiResponse<Session> OpenPublicationSessionWithHttpInfo(string channelUri, int operationIndex = 0)
        {
            // verify the required parameter 'channelUri' is set
            if (channelUri == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'channelUri' when calling ProviderPublicationServiceApi->OpenPublicationSession");
            }

            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channel-uri", Isbm2RestClient.Client.ClientUtils.ParameterToString(channelUri)); // path parameter

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.OpenPublicationSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Session>("/channels/{channel-uri}/publication-sessions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OpenPublicationSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Opens a publication session for a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Session</returns>
        public async System.Threading.Tasks.Task<Session> OpenPublicationSessionAsync(string channelUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Isbm2RestClient.Client.ApiResponse<Session> localVarResponse = await OpenPublicationSessionWithHttpInfoAsync(channelUri, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Opens a publication session for a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUri">The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        public async System.Threading.Tasks.Task<Isbm2RestClient.Client.ApiResponse<Session>> OpenPublicationSessionWithHttpInfoAsync(string channelUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelUri' is set
            if (channelUri == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'channelUri' when calling ProviderPublicationServiceApi->OpenPublicationSession");
            }


            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channel-uri", Isbm2RestClient.Client.ClientUtils.ParameterToString(channelUri)); // path parameter

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.OpenPublicationSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Session>("/channels/{channel-uri}/publication-sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OpenPublicationSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Posts a publication message on a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message PostPublication(string sessionId, Message? message = default(Message?), int operationIndex = 0)
        {
            Isbm2RestClient.Client.ApiResponse<Message> localVarResponse = PostPublicationWithHttpInfo(sessionId, message);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Posts a publication message on a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Isbm2RestClient.Client.ApiResponse<Message> PostPublicationWithHttpInfo(string sessionId, Message? message = default(Message?), int operationIndex = 0)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'sessionId' when calling ProviderPublicationServiceApi->PostPublication");
            }

            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.PostPublication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Message>("/sessions/{session-id}/publications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPublication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Posts a publication message on a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> PostPublicationAsync(string sessionId, Message? message = default(Message?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Isbm2RestClient.Client.ApiResponse<Message> localVarResponse = await PostPublicationWithHttpInfoAsync(sessionId, message, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Posts a publication message on a channel. 
        /// </summary>
        /// <exception cref="Isbm2RestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The identifier of the session to which the message will be posted.</param>
        /// <param name="message">The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Isbm2RestClient.Client.ApiResponse<Message>> PostPublicationWithHttpInfoAsync(string sessionId, Message? message = default(Message?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Isbm2RestClient.Client.ApiException(400, "Missing required parameter 'sessionId' when calling ProviderPublicationServiceApi->PostPublication");
            }


            Isbm2RestClient.Client.RequestOptions localVarRequestOptions = new Isbm2RestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Isbm2RestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Isbm2RestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session-id", Isbm2RestClient.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.Data = message;

            localVarRequestOptions.Operation = "ProviderPublicationServiceApi.PostPublication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (username_password) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Isbm2RestClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Message>("/sessions/{session-id}/publications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPublication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
