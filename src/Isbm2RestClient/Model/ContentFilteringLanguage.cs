/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Isbm2RestClient.Client.OpenAPIDateConverter;

namespace Isbm2RestClient.Model
{
    /// <summary>
    /// ContentFilteringLanguage
    /// </summary>
    [DataContract(Name = "ContentFilteringLanguage")]
    public partial class ContentFilteringLanguage : IEquatable<ContentFilteringLanguage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilteringLanguage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentFilteringLanguage()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilteringLanguage" /> class.
        /// </summary>
        /// <param name="applicableMediaTypes">applicableMediaTypes (required).</param>
        /// <param name="languageName">languageName (required).</param>
        /// <param name="languageVersion">languageVersion.</param>
        public ContentFilteringLanguage(List<string> applicableMediaTypes = default(List<string>), string languageName = default(string), string languageVersion = default(string))
        {
            // to ensure "applicableMediaTypes" is required (not null)
            if (applicableMediaTypes == null)
            {
                throw new ArgumentNullException("applicableMediaTypes is a required property for ContentFilteringLanguage and cannot be null");
            }
            this.ApplicableMediaTypes = applicableMediaTypes;
            // to ensure "languageName" is required (not null)
            if (languageName == null)
            {
                throw new ArgumentNullException("languageName is a required property for ContentFilteringLanguage and cannot be null");
            }
            this.LanguageName = languageName;
            this.LanguageVersion = languageVersion;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ApplicableMediaTypes
        /// </summary>
        [DataMember(Name = "applicableMediaTypes", IsRequired = true)]
        public List<string> ApplicableMediaTypes { get; set; }

        /// <summary>
        /// Gets or Sets LanguageName
        /// </summary>
        [DataMember(Name = "languageName", IsRequired = true)]
        public string LanguageName { get; set; }

        /// <summary>
        /// Gets or Sets LanguageVersion
        /// </summary>
        [DataMember(Name = "languageVersion", EmitDefaultValue = false)]
        public string LanguageVersion { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentFilteringLanguage {\n");
            sb.Append("  ApplicableMediaTypes: ").Append(ApplicableMediaTypes).Append("\n");
            sb.Append("  LanguageName: ").Append(LanguageName).Append("\n");
            sb.Append("  LanguageVersion: ").Append(LanguageVersion).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentFilteringLanguage);
        }

        /// <summary>
        /// Returns true if ContentFilteringLanguage instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentFilteringLanguage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentFilteringLanguage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicableMediaTypes == input.ApplicableMediaTypes ||
                    this.ApplicableMediaTypes != null &&
                    input.ApplicableMediaTypes != null &&
                    this.ApplicableMediaTypes.SequenceEqual(input.ApplicableMediaTypes)
                ) && 
                (
                    this.LanguageName == input.LanguageName ||
                    (this.LanguageName != null &&
                    this.LanguageName.Equals(input.LanguageName))
                ) && 
                (
                    this.LanguageVersion == input.LanguageVersion ||
                    (this.LanguageVersion != null &&
                    this.LanguageVersion.Equals(input.LanguageVersion))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicableMediaTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicableMediaTypes.GetHashCode();
                }
                if (this.LanguageName != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageName.GetHashCode();
                }
                if (this.LanguageVersion != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageVersion.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
