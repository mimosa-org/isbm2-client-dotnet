/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Isbm2RestClient.Client.OpenAPIDateConverter;

namespace Isbm2RestClient.Model
{
    /// <summary>
    /// content filtering expression that may be applied to messages on a channel
    /// </summary>
    [DataContract(Name = "FilterExpression")]
    public partial class FilterExpression : IEquatable<FilterExpression>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterExpression" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterExpression()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterExpression" /> class.
        /// </summary>
        /// <param name="applicableMediaTypes">applicableMediaTypes.</param>
        /// <param name="expressionString">expressionString (required).</param>
        /// <param name="namespaces">namespaces.</param>
        public FilterExpression(List<string> applicableMediaTypes = default(List<string>), FilterExpressionExpressionString expressionString = default(FilterExpressionExpressionString), List<Namespace> namespaces = default(List<Namespace>))
        {
            // to ensure "expressionString" is required (not null)
            if (expressionString == null)
            {
                throw new ArgumentNullException("expressionString is a required property for FilterExpression and cannot be null");
            }
            this.ExpressionString = expressionString;
            this.ApplicableMediaTypes = applicableMediaTypes;
            this.Namespaces = namespaces;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ApplicableMediaTypes
        /// </summary>
        [DataMember(Name = "applicableMediaTypes", EmitDefaultValue = false)]
        public List<string> ApplicableMediaTypes { get; set; }

        /// <summary>
        /// Gets or Sets ExpressionString
        /// </summary>
        [DataMember(Name = "expressionString", IsRequired = true)]
        public FilterExpressionExpressionString ExpressionString { get; set; }

        /// <summary>
        /// Gets or Sets Namespaces
        /// </summary>
        [DataMember(Name = "namespaces", EmitDefaultValue = false)]
        public List<Namespace> Namespaces { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterExpression {\n");
            sb.Append("  ApplicableMediaTypes: ").Append(ApplicableMediaTypes).Append("\n");
            sb.Append("  ExpressionString: ").Append(ExpressionString).Append("\n");
            sb.Append("  Namespaces: ").Append(Namespaces).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterExpression);
        }

        /// <summary>
        /// Returns true if FilterExpression instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterExpression input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicableMediaTypes == input.ApplicableMediaTypes ||
                    this.ApplicableMediaTypes != null &&
                    input.ApplicableMediaTypes != null &&
                    this.ApplicableMediaTypes.SequenceEqual(input.ApplicableMediaTypes)
                ) && 
                (
                    this.ExpressionString == input.ExpressionString ||
                    (this.ExpressionString != null &&
                    this.ExpressionString.Equals(input.ExpressionString))
                ) && 
                (
                    this.Namespaces == input.Namespaces ||
                    this.Namespaces != null &&
                    input.Namespaces != null &&
                    this.Namespaces.SequenceEqual(input.Namespaces)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicableMediaTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicableMediaTypes.GetHashCode();
                }
                if (this.ExpressionString != null)
                {
                    hashCode = (hashCode * 59) + this.ExpressionString.GetHashCode();
                }
                if (this.Namespaces != null)
                {
                    hashCode = (hashCode * 59) + this.Namespaces.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
