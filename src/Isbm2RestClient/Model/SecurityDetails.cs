/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Isbm2RestClient.Client.OpenAPIDateConverter;

namespace Isbm2RestClient.Model
{
    /// <summary>
    /// Gets the detailed security related information of the ISBM service provider.
    /// </summary>
    [DataContract(Name = "SecurityDetails")]
    public partial class SecurityDetails : IEquatable<SecurityDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityDetails()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityDetails" /> class.
        /// </summary>
        /// <param name="isTLSEnabled">isTLSEnabled (required).</param>
        /// <param name="isSecurityTokenRequired">isSecurityTokenRequired (required).</param>
        /// <param name="isSecurityTokenEncryptionEnabled">isSecurityTokenEncryptionEnabled (required).</param>
        /// <param name="isCertificateRequired">isCertificateRequired (required).</param>
        /// <param name="isRBACEnabled">isRBACEnabled (required).</param>
        /// <param name="isKeyManagementServiceEnabled">isKeyManagementServiceEnabled (required).</param>
        /// <param name="isEndToEndMessageEncryptionEnabled">isEndToEndMessageEncryptionEnabled (required).</param>
        public SecurityDetails(bool isTLSEnabled = default(bool), bool isSecurityTokenRequired = default(bool), bool isSecurityTokenEncryptionEnabled = default(bool), bool isCertificateRequired = default(bool), bool isRBACEnabled = default(bool), bool isKeyManagementServiceEnabled = default(bool), bool isEndToEndMessageEncryptionEnabled = default(bool))
        {
            this.IsTLSEnabled = isTLSEnabled;
            this.IsSecurityTokenRequired = isSecurityTokenRequired;
            this.IsSecurityTokenEncryptionEnabled = isSecurityTokenEncryptionEnabled;
            this.IsCertificateRequired = isCertificateRequired;
            this.IsRBACEnabled = isRBACEnabled;
            this.IsKeyManagementServiceEnabled = isKeyManagementServiceEnabled;
            this.IsEndToEndMessageEncryptionEnabled = isEndToEndMessageEncryptionEnabled;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets IsTLSEnabled
        /// </summary>
        [DataMember(Name = "isTLSEnabled", IsRequired = true)]
        public bool IsTLSEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsSecurityTokenRequired
        /// </summary>
        [DataMember(Name = "isSecurityTokenRequired", IsRequired = true)]
        public bool IsSecurityTokenRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsSecurityTokenEncryptionEnabled
        /// </summary>
        [DataMember(Name = "isSecurityTokenEncryptionEnabled", IsRequired = true)]
        public bool IsSecurityTokenEncryptionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsCertificateRequired
        /// </summary>
        [DataMember(Name = "isCertificateRequired", IsRequired = true)]
        public bool IsCertificateRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsRBACEnabled
        /// </summary>
        [DataMember(Name = "isRBACEnabled", IsRequired = true)]
        public bool IsRBACEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsKeyManagementServiceEnabled
        /// </summary>
        [DataMember(Name = "isKeyManagementServiceEnabled", IsRequired = true)]
        public bool IsKeyManagementServiceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsEndToEndMessageEncryptionEnabled
        /// </summary>
        [DataMember(Name = "isEndToEndMessageEncryptionEnabled", IsRequired = true)]
        public bool IsEndToEndMessageEncryptionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityDetails {\n");
            sb.Append("  IsTLSEnabled: ").Append(IsTLSEnabled).Append("\n");
            sb.Append("  IsSecurityTokenRequired: ").Append(IsSecurityTokenRequired).Append("\n");
            sb.Append("  IsSecurityTokenEncryptionEnabled: ").Append(IsSecurityTokenEncryptionEnabled).Append("\n");
            sb.Append("  IsCertificateRequired: ").Append(IsCertificateRequired).Append("\n");
            sb.Append("  IsRBACEnabled: ").Append(IsRBACEnabled).Append("\n");
            sb.Append("  IsKeyManagementServiceEnabled: ").Append(IsKeyManagementServiceEnabled).Append("\n");
            sb.Append("  IsEndToEndMessageEncryptionEnabled: ").Append(IsEndToEndMessageEncryptionEnabled).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityDetails);
        }

        /// <summary>
        /// Returns true if SecurityDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsTLSEnabled == input.IsTLSEnabled ||
                    this.IsTLSEnabled.Equals(input.IsTLSEnabled)
                ) && 
                (
                    this.IsSecurityTokenRequired == input.IsSecurityTokenRequired ||
                    this.IsSecurityTokenRequired.Equals(input.IsSecurityTokenRequired)
                ) && 
                (
                    this.IsSecurityTokenEncryptionEnabled == input.IsSecurityTokenEncryptionEnabled ||
                    this.IsSecurityTokenEncryptionEnabled.Equals(input.IsSecurityTokenEncryptionEnabled)
                ) && 
                (
                    this.IsCertificateRequired == input.IsCertificateRequired ||
                    this.IsCertificateRequired.Equals(input.IsCertificateRequired)
                ) && 
                (
                    this.IsRBACEnabled == input.IsRBACEnabled ||
                    this.IsRBACEnabled.Equals(input.IsRBACEnabled)
                ) && 
                (
                    this.IsKeyManagementServiceEnabled == input.IsKeyManagementServiceEnabled ||
                    this.IsKeyManagementServiceEnabled.Equals(input.IsKeyManagementServiceEnabled)
                ) && 
                (
                    this.IsEndToEndMessageEncryptionEnabled == input.IsEndToEndMessageEncryptionEnabled ||
                    this.IsEndToEndMessageEncryptionEnabled.Equals(input.IsEndToEndMessageEncryptionEnabled)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsTLSEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSecurityTokenRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSecurityTokenEncryptionEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCertificateRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRBACEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsKeyManagementServiceEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEndToEndMessageEncryptionEnabled.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
