/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Isbm2RestClient.Client.OpenAPIDateConverter;

namespace Isbm2RestClient.Model
{
    /// <summary>
    /// SupportedOperationsSupportedAuthentications
    /// </summary>
    [DataContract(Name = "SupportedOperations_supportedAuthentications")]
    public partial class SupportedOperationsSupportedAuthentications : IEquatable<SupportedOperationsSupportedAuthentications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedOperationsSupportedAuthentications" /> class.
        /// </summary>
        /// <param name="soapSupportedTokenSchemas">soapSupportedTokenSchemas.</param>
        /// <param name="restSupportedAuthenticationSchemes">The scheme names must match one of the schemes mentioned in HTTP Authentication Scheme Registry [https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml]..</param>
        public SupportedOperationsSupportedAuthentications(List<TokenSchema> soapSupportedTokenSchemas = default(List<TokenSchema>), List<AuthenticationScheme> restSupportedAuthenticationSchemes = default(List<AuthenticationScheme>))
        {
            this.SoapSupportedTokenSchemas = soapSupportedTokenSchemas;
            this.RestSupportedAuthenticationSchemes = restSupportedAuthenticationSchemes;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets SoapSupportedTokenSchemas
        /// </summary>
        [DataMember(Name = "soapSupportedTokenSchemas", EmitDefaultValue = false)]
        public List<TokenSchema> SoapSupportedTokenSchemas { get; set; }

        /// <summary>
        /// The scheme names must match one of the schemes mentioned in HTTP Authentication Scheme Registry [https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml].
        /// </summary>
        /// <value>The scheme names must match one of the schemes mentioned in HTTP Authentication Scheme Registry [https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml].</value>
        [DataMember(Name = "restSupportedAuthenticationSchemes", EmitDefaultValue = false)]
        public List<AuthenticationScheme> RestSupportedAuthenticationSchemes { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupportedOperationsSupportedAuthentications {\n");
            sb.Append("  SoapSupportedTokenSchemas: ").Append(SoapSupportedTokenSchemas).Append("\n");
            sb.Append("  RestSupportedAuthenticationSchemes: ").Append(RestSupportedAuthenticationSchemes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportedOperationsSupportedAuthentications);
        }

        /// <summary>
        /// Returns true if SupportedOperationsSupportedAuthentications instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportedOperationsSupportedAuthentications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportedOperationsSupportedAuthentications input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SoapSupportedTokenSchemas == input.SoapSupportedTokenSchemas ||
                    this.SoapSupportedTokenSchemas != null &&
                    input.SoapSupportedTokenSchemas != null &&
                    this.SoapSupportedTokenSchemas.SequenceEqual(input.SoapSupportedTokenSchemas)
                ) && 
                (
                    this.RestSupportedAuthenticationSchemes == input.RestSupportedAuthenticationSchemes ||
                    this.RestSupportedAuthenticationSchemes != null &&
                    input.RestSupportedAuthenticationSchemes != null &&
                    this.RestSupportedAuthenticationSchemes.SequenceEqual(input.RestSupportedAuthenticationSchemes)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SoapSupportedTokenSchemas != null)
                {
                    hashCode = (hashCode * 59) + this.SoapSupportedTokenSchemas.GetHashCode();
                }
                if (this.RestSupportedAuthenticationSchemes != null)
                {
                    hashCode = (hashCode * 59) + this.RestSupportedAuthenticationSchemes.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
